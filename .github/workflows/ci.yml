name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: write  # 允许上传文件到release

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022, windows-latest]  # Server2022/Win11 (移除已弃用的2019)
        python-version: ['3.12']
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: Create test directories
      run: |
        if (!(Test-Path "reports")) { New-Item -ItemType Directory -Path "reports" -Force }
        if (!(Test-Path "htmlcov")) { New-Item -ItemType Directory -Path "htmlcov" -Force }
      shell: powershell
        
    - name: Run unit tests
      run: |
        python tests/run_tests_ascii.py --type unit --verbose
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short -m "integration and not real_network" --html=reports/integration_report.html --self-contained-html
        
    - name: Generate test summary
      if: always()
      run: |
        Write-Host "📊 测试执行总结" -ForegroundColor Cyan
        Write-Host "==================" -ForegroundColor Cyan
        
        # 检查测试报告文件
        $reportFiles = @("reports/unit_report.html", "reports/integration_report.html", "reports/gui_report.html")
        foreach ($file in $reportFiles) {
          if (Test-Path $file) {
            $size = (Get-Item $file).Length
            Write-Host "✅ $file ($([math]::Round($size/1KB, 1)) KB)" -ForegroundColor Green
          } else {
            Write-Host "❌ $file (不存在)" -ForegroundColor Red
          }
        }
        
        # 检查覆盖率文件
        if (Test-Path "coverage.xml") {
          $coverage = Select-Xml -Path "coverage.xml" -XPath "//coverage/@line-rate" | Select-Object -ExpandProperty Node | Select-Object -ExpandProperty Value
          $coveragePercent = [math]::Round([double]$coverage * 100, 1)
          Write-Host "📈 代码覆盖率: $coveragePercent%" -ForegroundColor $(if($coveragePercent -ge 85) { "Green" } else { "Yellow" })
        }
      shell: powershell
        
    - name: Run GUI tests
      run: |
        pytest tests/gui/ -v --tb=short -m "gui" --html=reports/gui_report.html --self-contained-html
        
    - name: Run performance tests (quick)
      run: |
        pytest tests/performance/ -v --tb=short -m "performance and not slow" --html=reports/performance_report.html --self-contained-html
        
    - name: Environment compatibility warning
      run: |
        Write-Host "⚠️  测试环境覆盖情况 ⚠️" -ForegroundColor Yellow
        Write-Host "已测试环境: ${{ matrix.os }}" -ForegroundColor Cyan
        Write-Host "目标用户环境: Windows 10/11 桌面版" -ForegroundColor Cyan
        Write-Host "可能的差异: WMI查询结果、网络接口、GUI字体等" -ForegroundColor Yellow
        Write-Host "✅ 多Windows版本测试通过" -ForegroundColor Green
      shell: powershell
      
    - name: Run compatibility tests
      run: |
        python scripts/test_compatibility.py
        
    - name: Check test coverage
      run: |
        coverage report --fail-under=85
        coverage xml
        
    - name: Run quality check
      run: |
        python scripts/test_quality_check.py
        
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.os }}
        path: |
          reports/
          htmlcov/
          coverage.xml
        retention-days: 30
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./coverage.xml
        flags: ${{ matrix.os }}
        name: codecov-${{ matrix.os }}
        
    - name: Coverage trend analysis
      if: always()
      run: |
        Write-Host "📈 覆盖率趋势分析" -ForegroundColor Cyan
        Write-Host "==================" -ForegroundColor Cyan
        
        if (Test-Path "coverage.xml") {
          $coverage = Select-Xml -Path "coverage.xml" -XPath "//coverage/@line-rate" | Select-Object -ExpandProperty Node | Select-Object -ExpandProperty Value
          $coveragePercent = [math]::Round([double]$coverage * 100, 1)
          
          $coverageColor = if($coveragePercent -ge 85) { "Green" } elseif($coveragePercent -ge 70) { "Yellow" } else { "Red" }
          $statusColor = if($coveragePercent -ge 85) { "Green" } else { "Yellow" }
          $statusText = if($coveragePercent -ge 85) { "✅ 达标" } else { "⚠️ 需要改进" }
          
          Write-Host "当前覆盖率: $coveragePercent%" -ForegroundColor $coverageColor
          Write-Host "目标覆盖率: 85%" -ForegroundColor Cyan
          Write-Host "覆盖率状态: $statusText" -ForegroundColor $statusColor
        } else {
          Write-Host "❌ 无法获取覆盖率数据" -ForegroundColor Red
        }
      shell: powershell
      
    - name: Test failure notification
      if: failure()
      run: |
        Write-Host "🚨 测试失败通知" -ForegroundColor Red
        Write-Host "==================" -ForegroundColor Red
        Write-Host "构建信息:" -ForegroundColor Yellow
        Write-Host "  分支: ${{ github.ref_name }}" -ForegroundColor White
        Write-Host "  提交: ${{ github.sha }}" -ForegroundColor White
        Write-Host "  操作系统: ${{ matrix.os }}" -ForegroundColor White
        Write-Host "  Python版本: ${{ matrix.python-version }}" -ForegroundColor White
        Write-Host "" -ForegroundColor White
        Write-Host "请检查测试报告以获取详细信息" -ForegroundColor Yellow
        Write-Host "报告位置: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" -ForegroundColor Cyan
      shell: powershell

  lint:
    name: Code Quality Check
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Run Black (Code Formatting)
      run: black --check --diff .
      continue-on-error: true
      
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff .
      continue-on-error: true
      
    - name: Run Flake8 (Linting)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: true

  quality-gate:
    name: Quality Gate Check
    runs-on: windows-latest
    needs: [test, lint]
    if: always()
    
    steps:
    - name: Quality Gate Analysis
      run: |
        Write-Host "🔒 代码质量门禁检查" -ForegroundColor Cyan
        Write-Host "========================" -ForegroundColor Cyan
        
        # 检查测试结果
        $testResult = "${{ needs.test.result }}"
        $lintResult = "${{ needs.lint.result }}"
        
        Write-Host "测试结果: $testResult" -ForegroundColor $(if($testResult -eq "success") { "Green" } else { "Red" })
        Write-Host "代码质量检查: $lintResult" -ForegroundColor $(if($lintResult -eq "success") { "Green" } else { "Red" })
        
        # 质量门禁判断
        $qualityGatePassed = $testResult -eq "success" -and $lintResult -eq "success"
        
        if ($qualityGatePassed) {
          Write-Host "✅ 质量门禁检查通过，允许构建" -ForegroundColor Green
          Write-Host "QUALITY_GATE_PASSED=true" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "❌ 质量门禁检查失败，阻止构建" -ForegroundColor Red
          Write-Host "QUALITY_GATE_PASSED=false" >> $env:GITHUB_OUTPUT
          if ($testResult -ne "success") {
            Write-Host "  - 测试未通过" -ForegroundColor Red
          }
          if ($lintResult -ne "success") {
            Write-Host "  - 代码质量检查未通过" -ForegroundColor Red
          }
        }
      shell: powershell
      id: quality-gate
      
    outputs:
      quality-gate-passed: ${{ steps.quality-gate.outputs.QUALITY_GATE_PASSED }}

  build:
    name: Build Executable
    runs-on: windows-latest
    needs: [quality-gate]
    if: needs.quality-gate.outputs.quality-gate-passed == 'true' && (github.event_name == 'push' || github.event_name == 'release')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pyinstaller
        
    - name: Build executable
      run: |
        python scripts/build.py
      
    - name: Test executable
      run: |
        if (Test-Path "dist/NetKit.exe") {
          Write-Host "✅ NetKit executable built successfully" -ForegroundColor Green
          $fileSize = (Get-Item "dist/NetKit.exe").Length
          $fileSizeMB = [math]::Round($fileSize / 1MB, 1)
          $buildTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
          Write-Host "📦 File size: $fileSizeMB MB" -ForegroundColor Cyan
          Write-Host "🕒 Build time: $buildTime" -ForegroundColor Cyan
          Write-Host "🏗️ Platform: ${{ matrix.os || 'windows-latest' }}" -ForegroundColor Cyan
          Write-Host "🐍 Python: ${{ matrix.python-version || '3.12' }}" -ForegroundColor Cyan
          
          # 验证文件可执行性
          Write-Host "🔍 Checking executable..." -ForegroundColor Yellow
          & "dist/NetKit.exe" --version 2>&1 | Out-Null
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Executable validation passed" -ForegroundColor Green
          } else {
            Write-Host "⚠️  Executable validation failed (expected for GUI app)" -ForegroundColor Yellow
          }
        } else {
          Write-Host "❌ NetKit executable build failed" -ForegroundColor Red
          exit 1
        }
      shell: powershell
      
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: Netkit-${{ github.sha }}
        path: dist/NetKit.exe
        retention-days: 30

  release:
    name: Upload to Release
    runs-on: windows-latest
    needs: [build]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: Netkit-${{ github.sha }}
        path: ./dist/
        
    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ github.event.release.tag_name }} ./dist/NetKit.exe --clobber

  security:
    name: Security Scan
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit (Security Linting)
      run: bandit -r netkit/ gui/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Run Safety (Dependency Security)
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30 